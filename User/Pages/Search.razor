@page "/search/{value2}/{value3}/{value4}"
@using ClassLibraryDAL
@using ClassLibraryEntities
@inject IJSRuntime js

@using User.Authentication
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm


<style>
    .color-d {
        background-color: #1a1a97c4;
    }

    .size {
        font-size: 1.5rem;
    }
    .font{
        font-size:2.5rem;
    }
    .font1{
        font-size:2.5rem;
    }
  
</style>
@*@if (PassingDegreeList==null)
{
    <div class="container-fluid bg-3">
        <div class="container">
            
            <div class="row">
                <div class="col-md-12">
                    <div class="loader20">Loading...</div>
                </div>
            </div>
        </div>
    </div>
}*@
@*else{*@
<div>


    <div class="text-center">
        @* <img src="/images/img.png" height="100" style="margin-top:10rem;">*@
        
        @*<h1 class="text-black mt-4 mb-4 font1">Careers that matter</h1>
        <h1 class="text-black display-1 mb-5 font">Lets build your career with Pkversity</h1>*@
        <div class="mx-auto mt-1">




            <div class="row">
                <div class="col-sm-7 offset-sm-2">
                    <div class="input-group">



                      
                            <select class="form-select text-black size" @onchange="_DegOption" required>
                                <option value="-1" selected>Select Program Degree</option>

                                @foreach (var emp in @PassingDegreeList)
                                {
                                    <option value="@emp.PassingDegreesId">@emp.Title</option>
                                }
                            </select>
                     
                            <select @bind="@PassingDegreeSGid" class="form-select text-black size" aria-label="Default select example">
                                <option value="-1" selected>Select Passing Groups</option>

                                @foreach (var emp in @PassingDSGroupsList)
                                {
                                    if (alpha == emp.PassingDegreeId)
                                    {
                                        <option value="@emp.PassingDSGroupsId">@emp.PassingDSGroups</option>
                                    }
                                }
                            </select>
                       
                            <select @bind="@perc" class="form-select text-black size" aria-label="Default select example" required>
                                <option value="-1" selected>Select Percentage</option>
                                <option value="50">40-45 %</option>
                                <option value="50">45-50 %</option>
                                <option value="50">50-55 %</option>
                                <option value="60">55-60 %</option>
                                <option value="60">60-65 %</option>
                                <option value="60">65-70 %</option>


                            </select>
                      
                            <select @bind="cityID" class="form-select size" aria-label="Default select example" required>
                                <option value="-1">Select City</option>

                                @foreach (var emp in @CitiesList)
                                {

                                    <option value="@emp.CityId">@emp.CityName</option>

                                }
                            </select>
                       

                        <button type="submit" class="btn btn-primary text-white" @onclick="Submit">Search</button>


                    </div>

                </div>

            </div>
        </div>
    </div>

</div>

@if (check)
{
 <div class="container-fluid mt-5">
        <div class="row">
            @foreach (var emp in FilterCitiesList)
            {
                <div class="col-md-3 mt-4">
                    <div class="card text-dark bg-light shadow mb-3" style="max-width: 18rem;">

                        <div class="card-body">
                            <div class="h4">@emp.Title</div>
                            <h6 class="card-subtitle mb-2">You are eligible in <b>@emp.Departments </b> Departments</h6>

                            <button class="btn btn-primary mt-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" @onclick="e=>DepartmentsDetails(emp.InstituteId,emp.Title)">View Details</button>

                        </div>
                    </div>
                </div>

            }

        </div>
    </div>
}
 
<div class="offcanvas offcanvas-end w-100 canvas-color" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
    <div class="offcanvas-header">
        <h2 id="offcanvasRightLabel" class="text-black">@Title</h2>
        <button type="button" class="btn-close text-reset " style="Color:White;" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        @if (check1)
        {
            <ViewDetails FilterDepartmentList="FilterDepartmentList"></ViewDetails>

        }

    </div>
</div>

@if (checck)
{
    <MessageComponent CustomMessage="@Message"></MessageComponent>
}




@code {

    [Parameter]
    public string? value2{ get; set; }
    [Parameter]
    public string? value3{ get; set; }
    [Parameter]
    public string? value4{ get; set; }
    public bool Data { get; set; } = false;
    // public  Submit1 { get; set; }

    public string? value1 { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticatestate { get; set; }
    public bool isloading { get; set; } = false;
    private List<EntPassingDegree>? PassingDegreeList;
    private List<EntPassingDSGroups>? PassingDSGroupsList;
    private List<EntCities>? CitiesList;

    [Parameter]
    public List<EntFilter>? FilterCitiesList  { get; set; }



    private List<EntProgramDegreeDetails>? FilterDepartmentList { get; set; }

    public string? Title { get; set; }

    public string? alpha { get; set; }

    public string? PassingDegreeSGid { get; set; }

    public string? cityID { get; set; }


    public bool check { get; set; } = false;

    public bool check1 = false;
    public bool checck = false;

    public string? perc { get; set; }
    public string? Message { get; set; }




    private EntFilter? _ModelFilter { get; set; } = new EntFilter();







    private void LoadProgramDetails()
    {
        // System.Threading.Thread.Sleep(2000);
        this.PassingDegreeList = DALPassingDegree.GetPassingDegrees();
        this.PassingDSGroupsList = DALPassingDSGroups.GetPassingDSGroups();
        this.CitiesList = DalCities.GetCities();
    }
    protected override void OnInitialized()
    {
        //  isloading = true;
        // await Task.Run(LoadProgramDetails);
        LoadProgramDetails();
        List();
    }

    private void _DegOption(ChangeEventArgs e)
    {
        alpha = e.Value as string;

    }

    public void List()
    {


        FilterCitiesList = DalFilter.GetDepartmentsbyID(value2 , value3, value4);
        check = true;
    }

    public void  Submit() 
    {
        Data = false;


        if (PassingDegreeSGid != "-1" && !string.IsNullOrEmpty(PassingDegreeSGid as string) || cityID != "-1" && !string.IsNullOrEmpty(cityID as string) || perc != "-1" && !string.IsNullOrEmpty(perc as string))
        {  
            FilterCitiesList = DalFilter.GetDepartmentsbyID(PassingDegreeSGid, cityID, perc);
            check = true;
        }
        else
        {
            Alert();

        }

    }
    private async Task Alert()
    {
        await js.InvokeVoidAsync("alert", "Please select all values");
    }
    private void DepartmentsDetails(string iid, string title)
    {
        PassingDegreeSGid = value2;

      //  DisplayGreeting();
       // if (value1 != null && value1 != "")
       // {
            Title = title;
            FilterDepartmentList = DalFilter.GetDepartmentDetailsbyID(PassingDegreeSGid.ToString(), iid);
            check1 = true;
      //  }
      //  else
       // {
        //    nm.NavigateTo("/login");
             



       // }
    }

        private async Task DisplayGreeting()
    {
        var authState = await authenticatestate;
        value1 = $"{authState.User.Identity.Name}";

    }

}